/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/DemeterGift/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/DemeterGift/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "DemeterGift";

// the contract definition: a gRPC service definition.
service DemeterGiftContract {

    // the full name of the C# class that will contain the state (here <namespace>.<state-class-name> format).
    option (aelf.csharp_state) = "DemeterGiftContractState";

    // an action defined as a gRPC service method.
    // this action take a google.protobuf.Empty (placeholder for void) as input
    // and returns a custom defined type: HelloReturn.
    rpc Hello (google.protobuf.Empty) returns (google.protobuf.StringValue) { 
    }
    
    //Event
    rpc CreateEvent (google.protobuf.StringValue) returns (google.protobuf.StringValue) { 
    }

    rpc getTotalEvent (google.protobuf.Empty) returns (google.protobuf.StringValue) {
    }

    rpc getOneEvent (google.protobuf.StringValue) returns (google.protobuf.StringValue) { 
    }

    //Token
    rpc CreateToken (google.protobuf.StringValue) returns (google.protobuf.StringValue) {
    }

    rpc getTotalToken (google.protobuf.Empty) returns (google.protobuf.StringValue) { 
    }

    rpc getOneToken (google.protobuf.StringValue) returns (google.protobuf.StringValue) { 
    }
    //Bid
    rpc CreateBid (google.protobuf.StringValue) returns (google.protobuf.StringValue) {
    }

    rpc getTotalBid (google.protobuf.Empty) returns (google.protobuf.StringValue) { 
    }

    rpc getOneBid (google.protobuf.StringValue) returns (google.protobuf.StringValue) { 
    }




    //Event + Token
    rpc InsertAllEventToken (InsertEventTokenInput) returns (google.protobuf.Int32Value) { }
    rpc SearchAllTokenByEventID (google.protobuf.StringValue) returns (SearchedList) { }

    
    //Token + Bid
    rpc InsertAllTokenBid (InsertTokenBidInput) returns (google.protobuf.Int32Value) { }
    rpc SearchAllBidByTokenID (google.protobuf.StringValue) returns (SearchedListBids) { }

}

/**************************
     Event and Token     
**************************/
message InsertEventTokenInput {
    string eventID = 1;
    string TokenURI = 2;
}


message EventToken {   
     int32 eventID = 1;
     string TokenURI = 2;
}

message SearchedList {
    repeated string Tokens = 1;
}


/**************************
     Token and Bid     
**************************/
message InsertTokenBidInput {
    string tokenID = 1;
    string bidURI = 2;
}


message TokenBid {   
     int32 tokenID = 1;
     string bidURI = 2;
}

message SearchedListBids {
    repeated string Bids = 1;
}

